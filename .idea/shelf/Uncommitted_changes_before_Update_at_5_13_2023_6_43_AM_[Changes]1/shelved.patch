Index: task/domain/src/main/java/com/alitafreshi/domain/interactors/remote/GetRemoteNotesByUserId.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.alitafreshi.domain.interactors.remote\r\n\r\nimport com.alitafreshi.domain.DataState\r\nimport com.alitafreshi.domain.model.toNote\r\nimport com.alitafreshi.domain.remote.BaseResponse\r\nimport com.alitafreshi.domain.repository.remote.NoteRemoteRepository\r\nimport com.alitafreshi.room_db.task.model.Note\r\nimport kotlinx.coroutines.flow.Flow\r\nimport kotlinx.coroutines.flow.map\r\nimport kotlinx.coroutines.flow.transform\r\n\r\nclass GetRemoteNotesByUserId(private val noteRemoteRepository: NoteRemoteRepository) {\r\n\r\n    suspend operator fun invoke(): Flow<DataState<List<Note>>> =\r\n        noteRemoteRepository.getNotesByUserId()\r\n            .handleRequestState().map { dataState ->\r\n                when (dataState) {\r\n                    is DataState.Error -> {\r\n                        DataState.Error(dataState.errorMessage)\r\n                    }\r\n                    is DataState.Data -> {\r\n                        val mappedData = dataState.data?.map { noteDto -> noteDto.toNote() }\r\n                        DataState.Data(mappedData)\r\n                    }\r\n                    is DataState.Loading -> {\r\n                        DataState.Loading(dataState.loadingState)\r\n                    }\r\n                }\r\n            }\r\n}\r\n\r\ninline fun <reified T> Flow<BaseResponse<T>>.handleRequestState(successStatusCode: Int = 200): Flow<DataState<T>> =\r\n    transform { response ->\r\n        when (response.status.code) {\r\n            successStatusCode -> {\r\n                emit(DataState.Data(response.response))\r\n            }\r\n            else -> {\r\n                emit(DataState.Error(errorMessage = response.status.description))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/task/domain/src/main/java/com/alitafreshi/domain/interactors/remote/GetRemoteNotesByUserId.kt b/task/domain/src/main/java/com/alitafreshi/domain/interactors/remote/GetRemoteNotesByUserId.kt
--- a/task/domain/src/main/java/com/alitafreshi/domain/interactors/remote/GetRemoteNotesByUserId.kt	
+++ b/task/domain/src/main/java/com/alitafreshi/domain/interactors/remote/GetRemoteNotesByUserId.kt	
@@ -8,6 +8,7 @@
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.map
 import kotlinx.coroutines.flow.transform
+import retrofit2.Response
 
 class GetRemoteNotesByUserId(private val noteRemoteRepository: NoteRemoteRepository) {
 
@@ -29,14 +30,21 @@
             }
 }
 
-inline fun <reified T> Flow<BaseResponse<T>>.handleRequestState(successStatusCode: Int = 200): Flow<DataState<T>> =
+inline fun <reified T> Flow<Response<BaseResponse<T>>>.handleRequestState(successStatusCode: Int = 200): Flow<DataState<T>> =
     transform { response ->
-        when (response.status.code) {
+        when (response.code()) {
             successStatusCode -> {
-                emit(DataState.Data(response.response))
+                response.body()?.response?.let {
+                    emit(DataState.Data(it))
+                } ?: emit(DataState.Error(errorMessage = "Unknown Local Message"))
             }
             else -> {
-                emit(DataState.Error(errorMessage = response.status.description))
+                emit(
+                    DataState.Error(
+                        errorMessage = response.body()?.status?.description ?: response.code()
+                            .toString()
+                    )
+                )
             }
         }
     }
Index: task/data/src/main/java/com/alitafreshi/data/datasource/remote/repository/NoteRemoteRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.alitafreshi.data.datasource.remote.repository\r\n\r\nimport com.alitafreshi.domain.model.NoteDto\r\nimport com.alitafreshi.domain.remote.BaseResponse\r\nimport com.alitafreshi.domain.repository.remote.NoteRemoteRepository\r\nimport com.alitafreshi.domain.repository.remote.NoteRemoteService\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\nclass NoteRemoteRepositoryImpl(private val noteRemoteService: NoteRemoteService) :\r\n    NoteRemoteRepository {\r\n\r\n    override suspend fun getNotesByUserId(userId: Long): Flow<BaseResponse<List<NoteDto>>> =\r\n        noteRemoteService.getNotesByUserId()\r\n\r\n\r\n    override suspend fun insertNewNote(note: NoteDto): Flow<BaseResponse<NoteDto>> =\r\n        noteRemoteService.insertNewNote(note = note)\r\n\r\n\r\n    override suspend fun updateNote(noteId: Long, note: NoteDto): Flow<BaseResponse<NoteDto>> =\r\n        noteRemoteService.updateNote(noteId = noteId, note = note)\r\n\r\n\r\n    override suspend fun removeNote(noteId: Long): Flow<BaseResponse<String>> =\r\n        noteRemoteService.removeNote(noteId = noteId)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/task/data/src/main/java/com/alitafreshi/data/datasource/remote/repository/NoteRemoteRepositoryImpl.kt b/task/data/src/main/java/com/alitafreshi/data/datasource/remote/repository/NoteRemoteRepositoryImpl.kt
--- a/task/data/src/main/java/com/alitafreshi/data/datasource/remote/repository/NoteRemoteRepositoryImpl.kt	
+++ b/task/data/src/main/java/com/alitafreshi/data/datasource/remote/repository/NoteRemoteRepositoryImpl.kt	
@@ -5,23 +5,36 @@
 import com.alitafreshi.domain.repository.remote.NoteRemoteRepository
 import com.alitafreshi.domain.repository.remote.NoteRemoteService
 import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.flow
+import retrofit2.Response
 
 class NoteRemoteRepositoryImpl(private val noteRemoteService: NoteRemoteService) :
     NoteRemoteRepository {
 
-    override suspend fun getNotesByUserId(userId: Long): Flow<BaseResponse<List<NoteDto>>> =
-        noteRemoteService.getNotesByUserId()
+    override suspend fun getNotesByUserId(userId: Long): Flow<Response<BaseResponse<List<NoteDto>>>> =
+        flow {
+            emit(noteRemoteService.getNotesByUserId())
+        }
 
 
-    override suspend fun insertNewNote(note: NoteDto): Flow<BaseResponse<NoteDto>> =
-        noteRemoteService.insertNewNote(note = note)
+    override suspend fun insertNewNote(note: NoteDto): Flow<Response<BaseResponse<NoteDto>>> =
+        flow {
+            emit(noteRemoteService.insertNewNote(note = note))
+        }
 
 
-    override suspend fun updateNote(noteId: Long, note: NoteDto): Flow<BaseResponse<NoteDto>> =
-        noteRemoteService.updateNote(noteId = noteId, note = note)
+    override suspend fun updateNote(
+        noteId: Long,
+        note: NoteDto
+    ): Flow<Response<BaseResponse<NoteDto>>> =
+        flow {
+            emit(noteRemoteService.updateNote(noteId = noteId, note = note))
+        }
 
 
-    override suspend fun removeNote(noteId: Long): Flow<BaseResponse<String>> =
-        noteRemoteService.removeNote(noteId = noteId)
+    override suspend fun removeNote(noteId: Long): Flow<Response<BaseResponse<String>>> = flow {
+        emit(noteRemoteService.removeNote(noteId = noteId))
+    }
+
 
 }
\ No newline at end of file
Index: app/src/main/java/com/alitafreshi/noteapp/di/RemoteModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.alitafreshi.noteapp.di\r\n\r\nimport dagger.Module\r\nimport dagger.Provides\r\nimport dagger.hilt.InstallIn\r\nimport dagger.hilt.components.SingletonComponent\r\nimport okhttp3.OkHttpClient\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport javax.inject.Singleton\r\n\r\n@InstallIn(SingletonComponent::class)\r\n@Module\r\nobject RemoteModule {\r\n\r\n    @Singleton\r\n    @Provides\r\n    fun provideOkHttpClient(): OkHttpClient = OkHttpClient.Builder().build()\r\n\r\n    @Singleton\r\n    @Provides\r\n    fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {\r\n        return Retrofit.Builder()\r\n            .baseUrl(\"https://note-app.iran.liara.run/\")\r\n            .client(okHttpClient)\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .build()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/alitafreshi/noteapp/di/RemoteModule.kt b/app/src/main/java/com/alitafreshi/noteapp/di/RemoteModule.kt
--- a/app/src/main/java/com/alitafreshi/noteapp/di/RemoteModule.kt	
+++ b/app/src/main/java/com/alitafreshi/noteapp/di/RemoteModule.kt	
@@ -1,5 +1,6 @@
 package com.alitafreshi.noteapp.di
 
+import com.alitafreshi.constance.Constance.APP_BASE_URL
 import dagger.Module
 import dagger.Provides
 import dagger.hilt.InstallIn
@@ -21,7 +22,7 @@
     @Provides
     fun provideRetrofit(okHttpClient: OkHttpClient): Retrofit {
         return Retrofit.Builder()
-            .baseUrl("https://note-app.iran.liara.run/")
+            .baseUrl(APP_BASE_URL)
             .client(okHttpClient)
             .addConverterFactory(GsonConverterFactory.create())
             .build()
Index: task/domain/src/main/java/com/alitafreshi/domain/repository/remote/NoteRemoteRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.alitafreshi.domain.repository.remote\r\n\r\nimport com.alitafreshi.domain.model.NoteDto\r\nimport com.alitafreshi.domain.remote.BaseResponse\r\nimport kotlinx.coroutines.flow.Flow\r\n\r\ninterface NoteRemoteRepository {\r\n    suspend fun getNotesByUserId(userId: Long = 1): Flow<BaseResponse<List<NoteDto>>>\r\n\r\n    suspend fun insertNewNote(note: NoteDto): Flow<BaseResponse<NoteDto>>\r\n\r\n    suspend fun updateNote(noteId: Long, note: NoteDto): Flow<BaseResponse<NoteDto>>\r\n\r\n    suspend fun removeNote(noteId: Long): Flow<BaseResponse<String>>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/task/domain/src/main/java/com/alitafreshi/domain/repository/remote/NoteRemoteRepository.kt b/task/domain/src/main/java/com/alitafreshi/domain/repository/remote/NoteRemoteRepository.kt
--- a/task/domain/src/main/java/com/alitafreshi/domain/repository/remote/NoteRemoteRepository.kt	
+++ b/task/domain/src/main/java/com/alitafreshi/domain/repository/remote/NoteRemoteRepository.kt	
@@ -3,13 +3,14 @@
 import com.alitafreshi.domain.model.NoteDto
 import com.alitafreshi.domain.remote.BaseResponse
 import kotlinx.coroutines.flow.Flow
+import retrofit2.Response
 
 interface NoteRemoteRepository {
-    suspend fun getNotesByUserId(userId: Long = 1): Flow<BaseResponse<List<NoteDto>>>
+    suspend fun getNotesByUserId(userId: Long = 1): Flow<Response<BaseResponse<List<NoteDto>>>>
 
-    suspend fun insertNewNote(note: NoteDto): Flow<BaseResponse<NoteDto>>
+    suspend fun insertNewNote(note: NoteDto): Flow<Response<BaseResponse<NoteDto>>>
 
-    suspend fun updateNote(noteId: Long, note: NoteDto): Flow<BaseResponse<NoteDto>>
+    suspend fun updateNote(noteId: Long, note: NoteDto): Flow<Response<BaseResponse<NoteDto>>>
 
-    suspend fun removeNote(noteId: Long): Flow<BaseResponse<String>>
+    suspend fun removeNote(noteId: Long): Flow<Response<BaseResponse<String>>>
 }
\ No newline at end of file
